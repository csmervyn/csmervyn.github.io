<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Serializer on 墨客人生</title><link>http://example.org/tags/serializer/</link><description>Recent content in Serializer on 墨客人生</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 24 Nov 2024 22:03:04 +0800</lastBuildDate><atom:link href="http://example.org/tags/serializer/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Boot 中如何设置 serializer 的 TimeZone</title><link>http://example.org/posts/how_to_configure_timezone_for_serializer_in_spring_boot/</link><pubDate>Sun, 24 Nov 2024 22:03:04 +0800</pubDate><guid>http://example.org/posts/how_to_configure_timezone_for_serializer_in_spring_boot/</guid><description>&lt;h2 id="1-背景">
 1 背景
 &lt;a class="heading-link" href="#1-%e8%83%8c%e6%99%af">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="链接到标题">&lt;/i>
 &lt;span class="sr-only">链接到标题&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>在一个基于 Spring Boot 的服务中，对外提供一个 Restful 接口 A。该接口的返回值类型中包含一个 ZonedDateTime 类型的字段 createdDateTime。Prod 代码侧期望返回时区为 Australia/Sydney（UTC+10/UTC+10）的时间，并带有时区信息，例如，2024-11-03T08:23:24+11:00。并且测试侧代码也是按照期望进行了测试，测试在 Pipeline 和澳洲 Dev 的本地电脑中可以通过。测试示例如代码1所示。但是该代码确不能在中国 Dev 的本地电脑上工作。&lt;/p>
&lt;p>在同样的测试数据情况下，A 接口的响应中 createdDateTime 字段的值，因代码运行所在时区的不同而不同。具体来说，假如 ZonedDateTime 类型的 createdDateTime 字段在 Java 值为 2024-11-03T08:23:24+11:00[Australia/Sydney]。如果在澳洲运行测试代码，A 接口的响应为 &lt;code>{&amp;quot;createdDateTime&amp;quot;: 2024-11-03T08:23:24+11:00}&lt;/code>。但是如果在中国运行测试代码，A 接口的响应为 &lt;code>{&amp;quot;createdDateTime&amp;quot;: 2024-11-03T05:23:24+08:00}&lt;/code>。通过对比澳洲和中国的 A 接口的响应可以发现 createdDateTime 字段值，实际代表同一个时间但仅是时区不一样。一个时间是 UTC+11（Australia/Sydney），另一个是UTC+8（Asia/Shanghai）。但是从生产代码和测试代码的角度上来讲，其期望 A 接口的响应中的 createdDateTime 一直返回面向 UTC+10/UTC+11 的时间。测试代码示例，如代码清单 1 所示。
代码清单 1: 测试 A 接口的代码示例 UserControllerTest.java&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6e7681"> &lt;/span>&lt;span style="color:#ff7b72">void&lt;/span>&lt;span style="color:#6e7681"> &lt;/span>&lt;span style="color:#d2a8ff;font-weight:bold">theTimeZoneOfCreatedDateTimeShouldBeAustraliaSydney&lt;/span>()&lt;span style="color:#6e7681"> &lt;/span>&lt;span style="color:#ff7b72">throws&lt;/span>&lt;span style="color:#6e7681"> &lt;/span>Exception&lt;span style="color:#6e7681"> &lt;/span>{&lt;span style="color:#6e7681">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6e7681"> &lt;/span>mockMvc.perform(get(&lt;span style="color:#a5d6ff">&amp;#34;/users&amp;#34;&lt;/span>))&lt;span style="color:#6e7681">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6e7681"> &lt;/span>.andExpect(status().isOk())&lt;span style="color:#6e7681">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6e7681"> &lt;/span>.andExpect(jsonPath(&lt;span style="color:#a5d6ff">&amp;#34;$[0].createdDateTime&amp;#34;&lt;/span>,&lt;span style="color:#6e7681"> &lt;/span>is(notNullValue())))&lt;span style="color:#6e7681">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6e7681"> &lt;/span>.andExpect(jsonPath(&lt;span style="color:#a5d6ff">&amp;#34;$[0].createdDateTime&amp;#34;&lt;/span>,&lt;span style="color:#6e7681"> &lt;/span>anyOf(containsString(&lt;span style="color:#a5d6ff">&amp;#34;+11:00&amp;#34;&lt;/span>),&lt;span style="color:#6e7681"> &lt;/span>containsString(&lt;span style="color:#a5d6ff">&amp;#34;+10:00&amp;#34;&lt;/span>))));&lt;span style="color:#6e7681">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6e7681"> &lt;/span>}&lt;span style="color:#6e7681">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-问题的分析">
 2 问题的分析
 &lt;a class="heading-link" href="#2-%e9%97%ae%e9%a2%98%e7%9a%84%e5%88%86%e6%9e%90">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="链接到标题">&lt;/i>
 &lt;span class="sr-only">链接到标题&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>首先对问题的初步定位是，这是因为对象序列化方面的问题。首先我们了解到 Spring Boot 使用不同的 HttpMessageConverter 来处理不同的 MediaTypes 的响应。默认 Spring Boot 通过 Jackson 库，并使用 MappingJackson2HttpMessageConverter 处理 MediaType 为 &lt;code>application/json&lt;/code> 或 &lt;code>application/*+json&lt;/code> 的响应。MappingJackson2HttpMessageConverter 针对不同的数据类型，会利用 jackson-databind 库的或自定义的 Serializer 和 Deserializer，对接口的返回结果或请求参数进行序列化和反序列化。在这里我们遇到是关于序列化的问题，因此在这里目前我们仅仅关注序列化。例如 ZonedDateTime 类型的数据，MappingJackson2HttpMessageConverter 便是通过 jackson-databind 库中的 ObjectMapper 和该库中内建的 ZonedDateTimeSerializer，完成对 ZonedDateTime 类型的对象的序列化。在继续分析之前，我们需要先了解 Spring Boot 中如何构建 MappingJackson2HttpMessageConverter 和 ObjectMapper 对象的。&lt;/p></description></item></channel></rss>