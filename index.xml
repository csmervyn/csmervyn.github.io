<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>墨客人生</title><link>http://example.org/</link><description>Recent content on 墨客人生</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 24 Nov 2024 22:03:04 +0800</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Boot 中如何设置 serializer 的 TimeZone</title><link>http://example.org/posts/how_to_configure_timezone_for_serializer_in_spring_boot/</link><pubDate>Sun, 24 Nov 2024 22:03:04 +0800</pubDate><guid>http://example.org/posts/how_to_configure_timezone_for_serializer_in_spring_boot/</guid><description>&lt;h2 id="1-背景">
 1 背景
 &lt;a class="heading-link" href="#1-%e8%83%8c%e6%99%af">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="链接到标题">&lt;/i>
 &lt;span class="sr-only">链接到标题&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>在一个基于 Spring Boot 的服务中，对外提供一个 Restful 接口 A。该接口的返回值类型中包含一个 ZonedDateTime 类型的字段 createdDateTime。Prod 代码侧期望返回时区为 Australia/Sydney（UTC+10/UTC+10）的时间，并带有时区信息，例如，2024-11-03T08:23:24+11:00。并且测试侧代码也是按照期望进行了测试，测试在 Pipeline 和澳洲 Dev 的本地电脑中可以通过。测试示例如代码1所示。但是该代码确不能在中国 Dev 的本地电脑上工作。&lt;/p>
&lt;p>在同样的测试数据情况下，A 接口的响应中 createdDateTime 字段的值，因代码运行所在时区的不同而不同。具体来说，假如 ZonedDateTime 类型的 createdDateTime 字段在 Java 值为 2024-11-03T08:23:24+11:00[Australia/Sydney]。如果在澳洲运行测试代码，A 接口的响应为 &lt;code>{&amp;quot;createdDateTime&amp;quot;: 2024-11-03T08:23:24+11:00}&lt;/code>。但是如果在中国运行测试代码，A 接口的响应为 &lt;code>{&amp;quot;createdDateTime&amp;quot;: 2024-11-03T05:23:24+08:00}&lt;/code>。通过对比澳洲和中国的 A 接口的响应可以发现 createdDateTime 字段值，实际代表同一个时间但仅是时区不一样。一个时间是 UTC+11（Australia/Sydney），另一个是UTC+8（Asia/Shanghai）。但是从生产代码和测试代码的角度上来讲，其期望 A 接口的响应中的 createdDateTime 一直返回面向 UTC+10/UTC+11 的时间。测试代码示例，如代码清单 1 所示。
代码清单 1: 测试 A 接口的代码示例 UserControllerTest.java&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6e7681"> &lt;/span>&lt;span style="color:#ff7b72">void&lt;/span>&lt;span style="color:#6e7681"> &lt;/span>&lt;span style="color:#d2a8ff;font-weight:bold">theTimeZoneOfCreatedDateTimeShouldBeAustraliaSydney&lt;/span>()&lt;span style="color:#6e7681"> &lt;/span>&lt;span style="color:#ff7b72">throws&lt;/span>&lt;span style="color:#6e7681"> &lt;/span>Exception&lt;span style="color:#6e7681"> &lt;/span>{&lt;span style="color:#6e7681">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6e7681"> &lt;/span>mockMvc.perform(get(&lt;span style="color:#a5d6ff">&amp;#34;/users&amp;#34;&lt;/span>))&lt;span style="color:#6e7681">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6e7681"> &lt;/span>.andExpect(status().isOk())&lt;span style="color:#6e7681">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6e7681"> &lt;/span>.andExpect(jsonPath(&lt;span style="color:#a5d6ff">&amp;#34;$[0].createdDateTime&amp;#34;&lt;/span>,&lt;span style="color:#6e7681"> &lt;/span>is(notNullValue())))&lt;span style="color:#6e7681">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6e7681"> &lt;/span>.andExpect(jsonPath(&lt;span style="color:#a5d6ff">&amp;#34;$[0].createdDateTime&amp;#34;&lt;/span>,&lt;span style="color:#6e7681"> &lt;/span>anyOf(containsString(&lt;span style="color:#a5d6ff">&amp;#34;+11:00&amp;#34;&lt;/span>),&lt;span style="color:#6e7681"> &lt;/span>containsString(&lt;span style="color:#a5d6ff">&amp;#34;+10:00&amp;#34;&lt;/span>))));&lt;span style="color:#6e7681">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6e7681"> &lt;/span>}&lt;span style="color:#6e7681">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-问题的分析">
 2 问题的分析
 &lt;a class="heading-link" href="#2-%e9%97%ae%e9%a2%98%e7%9a%84%e5%88%86%e6%9e%90">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="链接到标题">&lt;/i>
 &lt;span class="sr-only">链接到标题&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>首先对问题的初步定位是，这是因为对象序列化方面的问题。首先我们了解到 Spring Boot 使用不同的 HttpMessageConverter 来处理不同的 MediaTypes 的响应。默认 Spring Boot 通过 Jackson 库，并使用 MappingJackson2HttpMessageConverter 处理 MediaType 为 &lt;code>application/json&lt;/code> 或 &lt;code>application/*+json&lt;/code> 的响应。MappingJackson2HttpMessageConverter 针对不同的数据类型，会利用 jackson-databind 库的或自定义的 Serializer 和 Deserializer，对接口的返回结果或请求参数进行序列化和反序列化。在这里我们遇到是关于序列化的问题，因此在这里目前我们仅仅关注序列化。例如 ZonedDateTime 类型的数据，MappingJackson2HttpMessageConverter 便是通过 jackson-databind 库中的 ObjectMapper 和该库中内建的 ZonedDateTimeSerializer，完成对 ZonedDateTime 类型的对象的序列化。在继续分析之前，我们需要先了解 Spring Boot 中如何构建 MappingJackson2HttpMessageConverter 和 ObjectMapper 对象的。&lt;/p></description></item><item><title>Gradle 的 org.springframework.boot 插件与 io.spring.dependency-management 插件的关系</title><link>http://example.org/posts/the-relationship-between-spring-boot-plugin-and-dependency-management-plugin/</link><pubDate>Tue, 22 Oct 2024 20:07:47 +0800</pubDate><guid>http://example.org/posts/the-relationship-between-spring-boot-plugin-and-dependency-management-plugin/</guid><description>&lt;h1 id="gradle-的-orgspringframeworkboot-插件与-iospringdependency-management-插件的关系">
 Gradle 的 org.springframework.boot 插件与 io.spring.dependency-management 插件的关系
 &lt;a class="heading-link" href="#gradle-%e7%9a%84-orgspringframeworkboot-%e6%8f%92%e4%bb%b6%e4%b8%8e-iospringdependency-management-%e6%8f%92%e4%bb%b6%e7%9a%84%e5%85%b3%e7%b3%bb">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="链接到标题">&lt;/i>
 &lt;span class="sr-only">链接到标题&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>最近在升级一个 Spring Boot 的应用的 Spring Boot 的版本，对 &lt;a href="https://plugins.gradle.org/plugin/org.springframework.boot" class="external-link" target="_blank" rel="noopener">org.springframework.boot&lt;/a> 插件的版本和 &lt;a href="https://plugins.gradle.org/plugin/io.spring.dependency-management" class="external-link" target="_blank" rel="noopener">io.spring.dependency-management&lt;/a> 插件的版本的关系产生了疑问。当时以为 org.springframework.boot 插件的版本和 io.spring.dependency-management 插件的版本，可能有某种映射关系。&lt;/p>
&lt;p>但是实际情况，并非之前理解的那样，并不存在那样映射关系。虽然 io.spring.dependency-management 是用来管理依赖版本，但其不直接控制依赖的版本，依赖的版本由应用所使用的 org.springframework.boot 插件的版本来控制。&lt;/p>
&lt;blockquote>
&lt;p>When you apply the io.spring.dependency-management plugin, Spring Boot’s plugin will automatically import the spring-boot-dependencies bom from the version of Spring Boot that you are using.&lt;/p>
&lt;/blockquote>
&lt;p>引用出处：&lt;a href="https://docs.spring.io/spring-boot/gradle-plugin/managing-dependencies.html#managing-dependencies.dependency-management-plugin" class="external-link" target="_blank" rel="noopener">Managing Dependencies with the Dependency Management Plugin&lt;/a>&lt;/p>
&lt;p>Spring Boot 的版本与 org.springframework.boot 插件的版本，是一对一的映射关系。以 3.3.4 的 org.springframework.boot 插件为例，其管理的依赖版本可以通过 &lt;a href="https://docs.spring.io/spring-boot/docs/3.1.1/reference/html/dependency-versions.html#appendix.dependency-versions.coordinates" class="external-link" target="_blank" rel="noopener">Spring Boot 的 Dependency Versions&lt;/a>查看，如图1所示。因此我们通过 org.springframework.boot 插件的版本便可以知道应用所使用 Spring Boot 的版本和相关依赖的版本。&lt;/p></description></item><item><title>解决 java.lang.OutOfMemoryError: Metaspace</title><link>http://example.org/posts/fix-outofmemoryerror-of-metaspace/</link><pubDate>Wed, 22 May 2024 12:34:42 +0800</pubDate><guid>http://example.org/posts/fix-outofmemoryerror-of-metaspace/</guid><description>&lt;h2 id="问题描述">
 问题描述
 &lt;a class="heading-link" href="#%e9%97%ae%e9%a2%98%e6%8f%8f%e8%bf%b0">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="链接到标题">&lt;/i>
 &lt;span class="sr-only">链接到标题&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>近日发现有一个微服务在运行时出现了 &lt;code>java.lang.OutOfMemoryError: Metaspace&lt;/code> 的错误。这个错误是由于 &lt;code>Metaspace&lt;/code> 区域内存不足导致的。&lt;code>Metaspace&lt;/code> 是 Java 8 之后取代了永久代的区域，用于存放类的元数据信息。Metaspace 是在本地内存中分配的，不受 Java 堆大小的限制，但是受本地内存大小的限制。
当 &lt;code>Metaspace&lt;/code> 区域内存不足时，会抛出 &lt;code>java.lang.OutOfMemoryError: Metaspace&lt;/code> 错误。Metaspace 在 Java 虚拟机内存中的位置如图1所示：&lt;/p>
&lt;p>&lt;img src="http://example.org/fix-OutOfMemoryError-of-Metaspace/Java-virtual-machine-memory-structure.png" alt="Java-virtual-machine-memory-structure">&lt;/p>
&lt;p>图1 Java 虚拟机内存结构（图片来自网络）&lt;/p>
&lt;p>同时，出现 &lt;code>java.lang.OutOfMemoryError: Metaspace&lt;/code> 错误时，Metaspace 区域的监控指标如图2所示。在图2中，可以看到 Metaspace 的 used 和 max 之间的差距很小，说明 Metaspace 区域内存不足。
&lt;img src="http://example.org/fix-OutOfMemoryError-of-Metaspace/Metespace_metrics_in_grafana.png" alt="Metesapce metrics in grafana">&lt;/p>
&lt;p>图2 在 grafana 中的 Metaspace 监控指标&lt;/p>
&lt;h2 id="解决方案">
 解决方案
 &lt;a class="heading-link" href="#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="链接到标题">&lt;/i>
 &lt;span class="sr-only">链接到标题&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;h3 id="临时解决方案">
 临时解决方案
 &lt;a class="heading-link" href="#%e4%b8%b4%e6%97%b6%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="链接到标题">&lt;/i>
 &lt;span class="sr-only">链接到标题&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>在出现 &lt;code>java.lang.OutOfMemoryError: Metaspace&lt;/code> 错误时，可以通过增加 Metaspace 区域的内存大小来解决。在启动 Java 应用时，可以通过 &lt;code>-XX:MaxMetaspaceSize&lt;/code> 参数来设置 Metaspace 区域的最大内存大小。例如，设置 Metaspace 区域的最大内存大小为 512M，可以通过如下命令来启动 Java 应用：&lt;/p></description></item><item><title>脑海中临时浮现的歌词</title><link>http://example.org/life/2024/random-lyrics-that-come-to-mind/</link><pubDate>Mon, 22 Apr 2024 09:12:54 +0800</pubDate><guid>http://example.org/life/2024/random-lyrics-that-come-to-mind/</guid><description>&lt;p>今天早上骑车时，脑海中突然浮现出一句歌词：&lt;/p>
&lt;p>我要的狂，是你的幸福，我的遗忘，还是那不折不扣的幻想。&lt;/p></description></item><item><title>在 Mac M1 上安装 Memory Analyzer</title><link>http://example.org/posts/install-memory-analyzer-on-mac-m1/</link><pubDate>Sun, 31 Mar 2024 11:38:29 +0800</pubDate><guid>http://example.org/posts/install-memory-analyzer-on-mac-m1/</guid><description>&lt;h1 id="下载-memory-analyzer">
 下载 Memory Analyzer
 &lt;a class="heading-link" href="#%e4%b8%8b%e8%bd%bd-memory-analyzer">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="链接到标题">&lt;/i>
 &lt;span class="sr-only">链接到标题&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;p>如图1-1所示，通过&lt;a href="https://eclipse.dev/mat/downloads.php" class="external-link" target="_blank" rel="noopener">Memory Analyzer 下载地址&lt;/a>下载 ARM 架构的 Memory Analyzer。直接安装下载好的dmg文件即可。&lt;/p>
&lt;p>&lt;img src="http://example.org/install-Memory-Analyzer-on-Mac-M1/download-memory-analyzer.png" alt="下载 ARM 架构的 Memory Analyzer">&lt;/p>
&lt;p>图1-1 下载 ARM 架构的 Memory Analyzer&lt;/p>
&lt;h2 id="troubleshooting">
 troubleshooting
 &lt;a class="heading-link" href="#troubleshooting">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="链接到标题">&lt;/i>
 &lt;span class="sr-only">链接到标题&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;h3 id="问题1-the-jvm-shared-library--does-not-contain-the-jni_createjavavm-symbol">
 问题1: The JVM shared library &amp;hellip; does not contain the JNI_CreateJavaVM symbol.
 &lt;a class="heading-link" href="#%e9%97%ae%e9%a2%981-the-jvm-shared-library--does-not-contain-the-jni_createjavavm-symbol">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="链接到标题">&lt;/i>
 &lt;span class="sr-only">链接到标题&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>错误信息图1-2所示。
details:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>The JVM shared library &amp;#34;/Library/Java/JavaVirtualMachines/temurin-20.jdk/Contents/Home/bin/../lib/server/libjvm.dylib&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>does not contain the JNI_CreateJavaVM symbol.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="http://example.org/install-Memory-Analyzer-on-Mac-M1/does-not-contain-jni-createJavaVM-symbol.png" alt="The JVM shared library does not contain the JNI_CreateJavaVM symbol">&lt;/p></description></item><item><title>如何修改最后一次 commit 的 author 信息</title><link>http://example.org/posts/git/change-the-author-of-last-commit/</link><pubDate>Sat, 20 Jan 2024 09:56:01 +0800</pubDate><guid>http://example.org/posts/git/change-the-author-of-last-commit/</guid><description>&lt;p>在新 repository 提交代码时，有时忘记配置该 repository scope 内的 &lt;code>user.name&lt;/code> 和 &lt;code>user.email&lt;/code>，从而导致 commit 的 author 信息为 global 配置的 &lt;code>user.name&lt;/code> 和 &lt;code>user.email&lt;/code>。如果此时想要修改最新提交的 author 信息，可以使用下面的 command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git commit --amend --author&lt;span style="color:#ff7b72;font-weight:bold">=&lt;/span>&lt;span style="color:#a5d6ff">&amp;#34;{username} &amp;lt;{email}&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git commit --amend --author&lt;span style="color:#ff7b72;font-weight:bold">=&lt;/span>&lt;span style="color:#a5d6ff">&amp;#34;csmervyn &amp;lt;csmervyn@gmail.com&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>由 Reactor Netty HttpClient 的 response-timeout 设置错误引发的生产事故的反思</title><link>http://example.org/posts/rethink-of-production-incident-caused-by-the-wrong-configuration-of-respond-timeout-in-terms-of-reactor-netty-httpclient/</link><pubDate>Wed, 17 Jan 2024 05:07:38 +0800</pubDate><guid>http://example.org/posts/rethink-of-production-incident-caused-by-the-wrong-configuration-of-respond-timeout-in-terms-of-reactor-netty-httpclient/</guid><description>&lt;p>在 onCall 的过程中，发生了一起由 Reactor Netty HttpClient 的 response-timeout 设置错误引发的 P2 级生产事故。造成了系统 1.5 小时部分功能不可用，使客户遭受了经济上的损失。本文期望针对完整的事件进行复盘与反思，以加强自己对线上环境的敬畏。&lt;/p>
&lt;h2 id="问题表现">
 问题表现
 &lt;a class="heading-link" href="#%e9%97%ae%e9%a2%98%e8%a1%a8%e7%8e%b0">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="链接到标题">&lt;/i>
 &lt;span class="sr-only">链接到标题&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>在 onCall 时，通过监控平台发现 Api-gateway 的 response time 和 failed request 数量持续不断攀升。从发现问题到解决，Response time 超过 500ms 持续 1小时40分钟，峰值为 3.14s；Failed request 峰值达到 4.14 k。
从用户侧来看系统部分功能卡顿或不可用，使用户在1.5小时内无法正常开展业务。&lt;/p>
&lt;h2 id="采取的紧急措施">
 采取的紧急措施
 &lt;a class="heading-link" href="#%e9%87%87%e5%8f%96%e7%9a%84%e7%b4%a7%e6%80%a5%e6%8e%aa%e6%96%bd">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="链接到标题">&lt;/i>
 &lt;span class="sr-only">链接到标题&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>通过排查发现前一天晚上，该 Api-gateway 有 changes，设置了全局的 HttpClient 和 Per-route 的 response-timeout。 其中全局的 HttpClient 的 response-timeout 为 x 秒。但是实际上系统存在一些 response time 超过 x 秒的请求，示例代码如代码清单 1-1 所示；Per-route 的 response-timeout 设置为 y 秒，但该 Per-route 的目标服务，也存在一些 response time 超过 y 秒的请求，示例代码如代码清单 1-2 所示。&lt;/p></description></item><item><title>How to Set Username and Email in Git</title><link>http://example.org/posts/git/how-to-set-username-and-email-in-git/</link><pubDate>Tue, 26 Dec 2023 20:10:48 +0800</pubDate><guid>http://example.org/posts/git/how-to-set-username-and-email-in-git/</guid><description>&lt;p>Git 中的 &lt;code>user.name&lt;/code> 和 &lt;code>user.email&lt;/code> 的 scope 的范围可以为单个 repository 的或全局的。利用这点上下文，我们可以很好解决多个 repository 中的 commit 需要不同 &lt;code>Author&lt;/code> 的问题。下面首先分别阐述如何设置 scope 为单个 repository 和如何设置全局的的&lt;code>user.name&lt;/code> 和 &lt;code>user.email&lt;/code>。&lt;/p>
&lt;p>Git 中的 &lt;code>user.name&lt;/code> 和 &lt;code>user.email&lt;/code> 的作用范围可分为单个 repository 和全局两种。这一特性使得我们能够有效解决在多个 repository 中进行 commit 时需要使用不同 &lt;code>Author&lt;/code> 信息的问题。以下将分别详细阐述如何将 &lt;code>user.name&lt;/code> 和 &lt;code>user.email&lt;/code> 的作用范围设置为单个 repository 和全局。&lt;/p>
&lt;h2 id="将-username-和-useremail-的作用范围设置为单个-repository">
 将 &lt;code>user.name&lt;/code> 和 &lt;code>user.email&lt;/code> 的作用范围设置为单个 repository
 &lt;a class="heading-link" href="#%e5%b0%86-username-%e5%92%8c-useremail-%e7%9a%84%e4%bd%9c%e7%94%a8%e8%8c%83%e5%9b%b4%e8%ae%be%e7%bd%ae%e4%b8%ba%e5%8d%95%e4%b8%aa-repository">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="链接到标题">&lt;/i>
 &lt;span class="sr-only">链接到标题&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>进入到 repository 的根目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>设置 Git username 和 email&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git config user.name csmervyn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config user.email csmervyn@gmail.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>确认设置是否生效&lt;/p></description></item><item><title>About me</title><link>http://example.org/about-me/</link><pubDate>Sat, 06 May 2023 08:08:46 +0800</pubDate><guid>http://example.org/about-me/</guid><description>&lt;p>👋 Hi, I&amp;rsquo;m Xinxin He, a full-stack developer with 7 years of R&amp;amp;D experience, based in China.&lt;/p>
&lt;p>✍️ This blog focuses on &lt;strong>develpment&lt;/strong>, &lt;strong>learning&lt;/strong> and &lt;strong>life insights&lt;/strong>.&lt;/p></description></item><item><title>如何构建自己的个人博客</title><link>http://example.org/posts/config-personal-website/how-to-create-your-personal-website/</link><pubDate>Thu, 04 May 2023 13:31:11 +0800</pubDate><guid>http://example.org/posts/config-personal-website/how-to-create-your-personal-website/</guid><description>&lt;p>构建属于自己的个人博客系统，往往涉及多方面的问题。例如：&lt;/p>
&lt;ul>
&lt;li>使用哪个 framework 构建自己的博客系统&lt;/li>
&lt;li>使用哪个内容托管平台托管自己的静态网友&lt;/li>
&lt;li>域名绑定&lt;/li>
&lt;/ul>
&lt;h1 id="1-使用-hugo-构建个人博客">
 1 使用 Hugo 构建个人博客
 &lt;a class="heading-link" href="#1-%e4%bd%bf%e7%94%a8-hugo-%e6%9e%84%e5%bb%ba%e4%b8%aa%e4%ba%ba%e5%8d%9a%e5%ae%a2">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="链接到标题">&lt;/i>
 &lt;span class="sr-only">链接到标题&lt;/span>
 &lt;/a>
&lt;/h1>
&lt;h2 id="11-安装与配置-hugo">
 1.1 安装与配置 Hugo
 &lt;a class="heading-link" href="#11-%e5%ae%89%e8%a3%85%e4%b8%8e%e9%85%8d%e7%bd%ae-hugo">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="链接到标题">&lt;/i>
 &lt;span class="sr-only">链接到标题&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;h3 id="111-安装-hugo">
 1.1.1 安装 Hugo
 &lt;a class="heading-link" href="#111-%e5%ae%89%e8%a3%85-hugo">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="链接到标题">&lt;/i>
 &lt;span class="sr-only">链接到标题&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>如果是 Mac os 可以使用包管理器进行安装 Hugo。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>brew install hugo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行的结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72;font-weight:bold">==&lt;/span>&amp;gt; Fetching &lt;span style="color:#79c0ff">hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72;font-weight:bold">==&lt;/span>&amp;gt; Downloading https://ghcr.io/v2/homebrew/core/hugo/manifests/0.111.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b949e;font-style:italic">################################################################ 100.0%&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72;font-weight:bold">==&lt;/span>&amp;gt; Downloading https://ghcr.io/v2/homebrew/core/hugo/blobs/sha256:0808
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72;font-weight:bold">==&lt;/span>&amp;gt; Downloading from https://pkg-containers.githubusercontent.com/ghcr1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8b949e;font-style:italic">################################################################ 100.0%&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72;font-weight:bold">==&lt;/span>&amp;gt; Pouring hugo--0.111.3.arm64_monterey.bottle.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72;font-weight:bold">==&lt;/span>&amp;gt; Caveats
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zsh completions have been installed to:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /opt/homebrew/share/zsh/site-functions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72;font-weight:bold">==&lt;/span>&amp;gt; Summary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>🍺 /opt/homebrew/Cellar/hugo/0.111.3: &lt;span style="color:#a5d6ff">48&lt;/span> files, 56.4MB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff7b72;font-weight:bold">==&lt;/span>&amp;gt; Running &lt;span style="color:#a5d6ff">`&lt;/span>brew cleanup hugo&lt;span style="color:#a5d6ff">`&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hide these hints with HOMEBREW_NO_ENV_HINTS &lt;span style="color:#ff7b72;font-weight:bold">(&lt;/span>see &lt;span style="color:#a5d6ff">`&lt;/span>man brew&lt;span style="color:#a5d6ff">`&lt;/span>&lt;span style="color:#ff7b72;font-weight:bold">)&lt;/span>.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="112-查看-hugo-是否安装成功">
 1.1.2 查看 Hugo 是否安装成功
 &lt;a class="heading-link" href="#112-%e6%9f%a5%e7%9c%8b-hugo-%e6%98%af%e5%90%a6%e5%ae%89%e8%a3%85%e6%88%90%e5%8a%9f">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="链接到标题">&lt;/i>
 &lt;span class="sr-only">链接到标题&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>hugo version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>出现如下的结果 Hugo 证明安装成功。&lt;/p></description></item></channel></rss>